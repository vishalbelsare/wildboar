import numpy as np
import pytest
from numpy.testing import assert_almost_equal
from wildboar.datasets import load_two_lead_ecg
from wildboar.distance import matrix_profile, paired_matrix_profile


def test_matrix_profile_default_ab():
    X, y = load_two_lead_ecg()

    # fmt: off
    expected = np.array([
        1.85485806, 2.04189217, 1.61152093, 1.28918337, 0.98731895,
        0.46298452, 0.46638957, 0.51716696, 0.71634711, 1.0086685 ,
        1.10196784, 1.47277975, 1.45762962, 1.39051391, 1.0684843 ,
        1.62441385, 2.15281337, 2.48942292, 2.51522466, 2.93799562,
        2.95334953, 2.99803479, 1.00047421, 0.43120971, 0.20120383,
        0.17891638, 0.12638857, 0.27006209, 0.29535878, 0.37603976,
        0.46448522, 0.56602588, 0.73233533, 0.40796422, 0.36939184,
        0.38276647, 0.33680521, 0.3023735 , 0.31008989, 0.28842092,
        0.30879536, 0.29252327, 0.38215995, 0.43954901, 0.45906786,
        0.76542499, 0.92098012, 1.36781938, 2.19019324, 2.14038496,
        2.30960855, 1.56977195, 1.85056003, 1.69325664, 0.98877909,
        1.31914597, 1.04111243, 0.6298452 , 0.43746438, 0.44377348,
        0.62282996, 0.81044968, 1.09542537, 1.14500467, 1.06902017,
        0.84919297, 0.63848026, 0.3756267 , 0.32832869, 0.30666126,
        0.33401063, 0.3372576 , 0.31398372
    ])
    # fmt: on
    actual = matrix_profile(X[:1], X[11:22], window=10, kind="default").reshape(-1)
    assert_almost_equal(actual, expected)


def test_matrix_profile_default_selfjoin():
    X, y = load_two_lead_ecg()
    # fmt: off
    expected = np.array([
        2.42477162, 2.08407106, 1.38593105, 1.29374158, 1.07510489,
        1.02428987, 1.15866652, 1.35047213, 1.05808208, 1.23983833,
        1.47354517, 1.85352675, 1.77887733, 1.34422992, 1.40683131,
        2.04807781, 2.83507829, 2.75803457, 2.61303871, 3.17154618,
        2.97413038, 3.13755075, 2.4181928 , 1.89970873, 1.38442237,
        1.14108156, 1.11300403, 1.17359459, 1.05808208, 1.24771165,
        1.57299771, 2.69288062, 1.53470498, 0.80872572, 0.49022059,
        0.49006835, 0.45953059, 0.47482871, 0.49006835, 0.45953059,
        0.46153323, 0.49022059, 0.48257057, 0.93706568, 1.20230842,
        1.64446842, 1.82488272, 1.91767155, 2.65747712, 2.86538035,
        2.26232935, 2.25917289, 1.72739556, 1.85524652, 1.65788763,
        1.43241249, 1.37372259, 1.19391124, 0.49853151, 0.48257057,
        0.75029095, 0.98572672, 1.68331258, 2.51789033, 2.08407106,
        1.30993171, 1.25322512, 0.9572344 , 0.73664667, 0.73170902,
        0.91902714, 0.73170902, 0.79090289
    ])
    # fmt: on
    actual = matrix_profile(X[:1], window=10, kind="default").reshape(-1)
    assert_almost_equal(actual, expected)


@pytest.mark.parametrize("window", [5, 10])
@pytest.mark.parametrize("n_jobs", [2, -1])
def test_matrix_profile_n_jobs(window, n_jobs):
    X, y = load_two_lead_ecg()
    # self-join
    assert_almost_equal(
        matrix_profile(X[:10], window=window, n_jobs=n_jobs),
        matrix_profile(X[:10], window=window, n_jobs=None),
    )
    # ab-join
    assert_almost_equal(
        matrix_profile(X[:10], X[20:30], window=window, n_jobs=n_jobs),
        matrix_profile(X[:10], X[20:30], window=window, n_jobs=None),
    )


def test_matrix_profile_equal_ab_join():
    X, y = load_two_lead_ecg()

    # TODO(1.4) Remove test
    # We test that the old behavior corresponds the inverse of the new, i.e.,
    #  - (NEW) every subsequence in X is annotated with the closest match in Y;
    #  - (OLD) every subsequence in Y is annotated with the closest match in X.
    mp1 = paired_matrix_profile(X[:10], X[10:20])
    mp2 = matrix_profile(X[10:20], X[:10])
    assert_almost_equal(mp1, mp2)


def test_matrix_profile_self_join_performance(benchmark):
    X, y = load_two_lead_ecg()
    benchmark(paired_matrix_profile, X=X[:10].reshape(-1))


def test_matrix_profile_ab_join_performance(benchmark):
    X, y = load_two_lead_ecg()
    benchmark(paired_matrix_profile, X=X[:10].reshape(-1), Y=X[10:20].reshape(-1))


def test_matrix_profile_self_join():
    X, y = load_two_lead_ecg()
    mp = matrix_profile(X[:10].reshape(-1))

    desired = np.array(
        [
            0.27618657260892654,
            1.0554301512432789,
            0.7588059280273162,
            0.1488230782667199,
            0.25595531149532785,
            0.3644992342498726,
            0.5234736999834144,
            0.363698476907543,
            0.5481421265897276,
            0.35416174646569426,
        ]
    )
    assert_almost_equal(mp[:10], desired)


def test_matrix_profile_self_join_n_samples():
    X, y = load_two_lead_ecg()
    mp = matrix_profile(X[:10])
    desired = np.array(
        [
            [
                1.4586498076854104,
                1.4467365490083097,
                0.7588059280270435,
                0.3904680291557426,
                0.9467496074353395,
                0.6593719617427912,
                0.5234736999834144,
                0.363698476907438,
                0.6189181204449019,
                0.8645612988017564,
            ],
            [
                1.0525399927074106,
                0.8259428007698474,
                0.342713453444541,
                0.14853487803760085,
                0.3853146156573823,
                0.29721944221565544,
                1.1740019465570506,
                0.8195859280763638,
                0.8670526810940837,
                0.7530679516192695,
            ],
            [
                0.28496746648951543,
                0.20294506413256136,
                0.2435110409046112,
                0.15393733370740934,
                0.18992276854684462,
                0.0800730564260178,
                0.8960533034190347,
                1.1279808210574787,
                0.7770430355523702,
                0.6309354483384741,
            ],
            [
                0.6062620161003718,
                0.5587718035490568,
                0.1959149587529992,
                0.20254407552633083,
                0.13807556733641763,
                0.3874161691594712,
                1.064269376118339,
                0.17772460508391602,
                0.25448963890557463,
                0.16355254941586592,
            ],
            [
                1.3736653232996774,
                0.907108498573625,
                0.7847446171185899,
                1.156796022975651,
                0.9066909638152494,
                0.478818489260254,
                0.7464754485801568,
                0.4312335884859304,
                0.47881848926066206,
                0.7009016514151587,
            ],
            [
                0.8940742997666457,
                0.8671533413301612,
                0.756247074366988,
                0.7287912519421545,
                0.21863818877054428,
                0.17967018899684342,
                0.19193678109476467,
                0.22019977608746172,
                0.4513008331069323,
                1.0554341649168666,
            ],
            [
                0.2485631846206986,
                0.11438388322780667,
                0.041614681409738494,
                0.9813454329895592,
                1.0120537808245802,
                0.3651481463113221,
                0.3202352693527206,
                0.36394535930920896,
                0.3792852462154986,
                0.3804280941596281,
            ],
            [
                0.3541616476153807,
                0.2608849238260666,
                0.2677769780582238,
                0.17128166152746926,
                0.5678949700027617,
                0.8784376047772038,
                1.2478672212548703,
                0.9586011392636432,
                0.3299626620525322,
                0.8472268668943336,
            ],
            [
                0.17879325340388713,
                0.23906125654859295,
                0.5245291383132006,
                0.835159133851027,
                0.8555613331652552,
                0.6678034241367441,
                0.36722208260161726,
                0.8494125986140834,
                0.7967774089824612,
                1.2687469769172344,
            ],
            [
                0.5431860040994623,
                0.6493259588572171,
                1.8554915623342167,
                0.925543876524477,
                0.4314528982279053,
                0.17255605705915866,
                0.19327668019613156,
                0.31639250165788724,
                0.9109058346072486,
                1.0052360983658788,
            ],
        ]
    )

    assert_almost_equal(mp[:, :10], desired)

    mp1 = paired_matrix_profile(X[:100:2, :40:2])
    mp2 = paired_matrix_profile(X[:100, :40:2])[::2]
    assert_almost_equal(mp1, mp2)
