# Authors: Isak Samsten
# License: BSD 3 clause

import numpy as np
from numpy.testing import assert_almost_equal, assert_equal

from wildboar.datasets import load_dataset
from wildboar.tree import ProximityTreeClassifier
from wildboar.utils.estimator_checks import check_estimator


def test_check_estimator():
    check_estimator(
        ProximityTreeClassifier(metric_factories={"euclidean": {}}),
        ignore=["check_sample_weights_invariance"],
    )


def test_proximity_tree():
    x_train, x_test, y_train, y_test = load_dataset(
        "GunPoint", repository="wildboar/ucr-tiny", merge_train_test=False
    )
    clf = ProximityTreeClassifier(random_state=123)
    clf.fit(x_train, y_train)

    expected_predict = np.array(
        [
            2.0,
            2.0,
            2.0,
            1.0,
            2.0,
            2.0,
            2.0,
            2.0,
            2.0,
            1.0,
            1.0,
            1.0,
            2.0,
            1.0,
            2.0,
            1.0,
            2.0,
            2.0,
            1.0,
            2.0,
            2.0,
            1.0,
            1.0,
            2.0,
            1.0,
            1.0,
            1.0,
            1.0,
            2.0,
            2.0,
            1.0,
            2.0,
            2.0,
            1.0,
            2.0,
            2.0,
            2.0,
            2.0,
            2.0,
            2.0,
            2.0,
            1.0,
            1.0,
            1.0,
            2.0,
            1.0,
            1.0,
            2.0,
            1.0,
            2.0,
        ]
    )
    expected_score = 0.72
    assert_equal(clf.predict(x_train), expected_predict)
    assert_almost_equal(clf.score(x_test, y_test), expected_score)

    expected_branch = np.array(
        [
            [
                1,
                2,
                3,
                4,
                -1,
                -1,
                -1,
                8,
                -1,
                10,
                -1,
                -1,
                13,
                14,
                15,
                -1,
                -1,
                18,
                -1,
                -1,
                21,
                -1,
                23,
                -1,
                25,
                -1,
                -1,
            ],
            [
                12,
                7,
                6,
                5,
                -1,
                -1,
                -1,
                9,
                -1,
                11,
                -1,
                -1,
                20,
                17,
                16,
                -1,
                -1,
                19,
                -1,
                -1,
                22,
                -1,
                24,
                -1,
                26,
                -1,
                -1,
            ],
        ]
    )
    assert_equal(clf.tree_.branch, expected_branch)

    expected_apply = np.array(
        [
            21,
            4,
            21,
            23,
            8,
            10,
            21,
            21,
            6,
            10,
            4,
            18,
            10,
            25,
            23,
            8,
            10,
            10,
            4,
            10,
            23,
            21,
            8,
            8,
            23,
            19,
            25,
            25,
            8,
            8,
            10,
            21,
            19,
            10,
            8,
            8,
            8,
            6,
            8,
            10,
            8,
            15,
            6,
            6,
            15,
            21,
            19,
            11,
            10,
            6,
            5,
            21,
            8,
            21,
            8,
            25,
            19,
            8,
            10,
            8,
            21,
            19,
            25,
            8,
            11,
            6,
            23,
            8,
            10,
            8,
            6,
            10,
            6,
            26,
            26,
            6,
            6,
            21,
            21,
            8,
            19,
            19,
            21,
            5,
            10,
            4,
            25,
            10,
            8,
            11,
            8,
            21,
            8,
            21,
            10,
            8,
            8,
            26,
            25,
            8,
            18,
            23,
            21,
            6,
            4,
            6,
            8,
            8,
            8,
            10,
            11,
            10,
            21,
            18,
            8,
            23,
            21,
            23,
            8,
            21,
            23,
            19,
            4,
            21,
            21,
            19,
            18,
            6,
            21,
            21,
            26,
            10,
            23,
            8,
            19,
            21,
            25,
            8,
            25,
            6,
            15,
            21,
            8,
            21,
            10,
            10,
            6,
            6,
            19,
            19,
        ]
    )

    assert_equal(clf.apply(x_test), expected_apply)
