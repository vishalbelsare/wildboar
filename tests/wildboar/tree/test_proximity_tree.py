import numpy as np
from numpy.testing import assert_almost_equal, assert_equal

from wildboar.datasets import load_dataset
from wildboar.tree import ProximityTreeClassifier
from wildboar.utils.estimator_checks import check_estimator


def test_check_estimator():
    check_estimator(
        ProximityTreeClassifier(metric_factories={"euclidean": {}}),
        ignore=["check_sample_weights_invariance"],
    )


def test_proximity_tree():
    x_train, x_test, y_train, y_test = load_dataset(
        "GunPoint", repository="wildboar/ucr-tiny", merge_train_test=False
    )
    clf = ProximityTreeClassifier(random_state=123)
    clf.fit(x_train, y_train)

    expected_predict = np.array(
        [
            2.0,
            2.0,
            1.0,
            1.0,
            2.0,
            1.0,
            2.0,
            2.0,
            2.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            2.0,
            1.0,
            2.0,
            2.0,
            1.0,
            2.0,
            2.0,
            1.0,
            1.0,
            2.0,
            1.0,
            2.0,
            1.0,
            1.0,
            2.0,
            1.0,
            1.0,
            2.0,
            2.0,
            1.0,
            2.0,
            1.0,
            2.0,
            2.0,
            2.0,
            2.0,
            2.0,
            1.0,
            1.0,
            1.0,
            2.0,
            2.0,
            1.0,
            1.0,
            1.0,
            2.0,
        ]
    )
    expected_score = 0.8133333334
    assert_equal(clf.predict(x_train), expected_predict)
    assert_almost_equal(clf.score(x_test, y_test), expected_score)

    expected_branch = np.array(
        [
            [1, 2, -1, 4, 5, -1, -1, -1, 9, 10, 11, -1, -1, -1, 15, -1, -1],
            [8, 3, -1, 7, 6, -1, -1, -1, 14, 13, 12, -1, -1, -1, 16, -1, -1],
        ]
    )
    assert_equal(clf.tree_.branch, expected_branch)

    expected_apply = np.array(
        [
            15,
            5,
            16,
            2,
            7,
            6,
            15,
            16,
            2,
            6,
            2,
            15,
            6,
            15,
            15,
            7,
            6,
            6,
            6,
            6,
            11,
            16,
            7,
            7,
            11,
            16,
            15,
            15,
            7,
            7,
            6,
            16,
            16,
            6,
            7,
            7,
            7,
            2,
            7,
            7,
            7,
            16,
            2,
            7,
            16,
            15,
            16,
            7,
            6,
            2,
            6,
            16,
            7,
            16,
            7,
            15,
            16,
            5,
            7,
            6,
            15,
            16,
            15,
            7,
            7,
            7,
            15,
            7,
            5,
            6,
            2,
            5,
            7,
            13,
            13,
            5,
            5,
            16,
            16,
            7,
            15,
            15,
            16,
            5,
            5,
            5,
            15,
            7,
            6,
            6,
            6,
            16,
            7,
            13,
            6,
            6,
            5,
            12,
            15,
            7,
            12,
            15,
            15,
            2,
            6,
            7,
            7,
            12,
            6,
            6,
            6,
            5,
            15,
            12,
            7,
            11,
            16,
            11,
            7,
            16,
            11,
            16,
            5,
            16,
            15,
            16,
            15,
            2,
            13,
            16,
            12,
            6,
            15,
            6,
            15,
            16,
            15,
            7,
            15,
            7,
            16,
            15,
            6,
            16,
            6,
            6,
            2,
            7,
            16,
            15,
        ]
    )

    assert_equal(clf.apply(x_test), expected_apply)
