from numpy.testing import assert_almost_equal, assert_equal
from sklearn.metrics import balanced_accuracy_score
from sklearn.model_selection import train_test_split

from wildboar.datasets import load_two_lead_ecg, outlier
from wildboar.ensemble import IsolationShapeletForest
from wildboar.utils.estimator_checks import check_estimator


def test_estimator_checks():
    check_estimator(IsolationShapeletForest())


def load_test_dataset():
    X, y = load_two_lead_ecg()
    X, y = outlier.emmott_outliers(X, y, n_outliers=0.05, random_state=0)
    return train_test_split(X, y, random_state=0)


def test_fit_predict_score_sample():
    X_train, X_test, y_train, y_test = load_test_dataset()
    isf = IsolationShapeletForest(n_shapelets=1, random_state=0)
    isf.fit(X_train)

    expected_score_samples = [
        -0.45225185235193477,
        -0.4589676497447121,
        -0.44707309165349346,
        -0.457527141500974,
        -0.44964264966867495,
        -0.5210286127897475,
        -0.5065842444276941,
        -0.4449727860759679,
        -0.4537820310208168,
        -0.47029331050717993,
    ]
    assert_almost_equal(isf.score_samples(X_test[:10]), expected_score_samples)

    expected_y_pred = [
        1,
        1,
        1,
        1,
        1,
        -1,
        -1,
        1,
        1,
        1,
        1,
        1,
        -1,
        -1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        -1,
        1,
        1,
        -1.0,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        -1,
        1,
        -1,
        1,
        -1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        -1,
        1,
        1,
        -1,
        1,
        1,
        1,
        -1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        -1,
        -1,
        1,
        1,
        1,
        1,
        1,
        1,
        -1,
        1,
        1,
        1,
        -1,
        1,
        -1,
        1,
        -1,
        1,
        1,
        1,
        -1,
        1,
        1,
        1,
        1,
        -1,
        1,
        -1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        -1,
        -1,
        1,
        -1,
        1,
        1,
        1,
        1,
        1,
        -1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        -1,
        1,
        1,
        1,
        1,
        1,
    ]

    y_pred = isf.predict(X_test)
    assert_equal(y_pred, expected_y_pred)
    assert_almost_equal(balanced_accuracy_score(y_test, y_pred), 0.7585034013605442)
